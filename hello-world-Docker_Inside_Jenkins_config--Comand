#Stop the Current Jenkins Container (if it's running):

docker stop jenkins

#Run Jenkins with Docker Access: Start the Jenkins container with Docker’s socket mounted. This setup allows Jenkins to access Docker on the host machine directly.

docker run -d \
  -u root \
  --name jenkins \
  -p 8080:8080 -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  -v /var/run/docker.sock:/var/run/docker.sock \
  jenkins/jenkins:lts

#Install Docker Inside Jenkins:
#Once Jenkins is up, access the Jenkins container's shell:

docker exec -it jenkins bash

#Install Docker CLI:

    apt-get update
    apt-get install -y docker.io

#Verify Docker in Jenkins:
#Run the following to confirm Docker is accessible within Jenkins:

docker --version
docker ps



######Run the following command on your host machine to check if the Docker socket is mounted inside the Jenkins container:

docker inspect -f '{{ json .Mounts }}' <container_name_or_id>

######Check Docker Access from Inside the Jenkins Container: Start a shell inside your Jenkins container:

docker exec -it <container_name_or_id> /bin/bash

^<3###########Replace <container_name_or_id> with the name or ID of your Jenkins container (e.g., jenkins).Look for an entry with 
"Source": "/var/run/docker.sock" and "Destination": "/var/run/docker.sock". This confirms that the Docker socket is mounted.






















    sonar-scanner --version

Step 2: Configure Jenkins Pipeline to Use SonarQube Scanner

Now that the scanner is installed in the Jenkins container, you can add a stage in your pipeline for SonarQube analysis.
Example Jenkins Pipeline

Here's how to integrate SonarQube analysis into your pipeline:

groovy

pipeline {
    agent any

    environment {
        IMAGE_NAME = 'hasanjaved667/hello-world-from-jenkins-pipeline'
        IMAGE_TAG = 'from-jenkins-pipeline'
        SONAR_HOST_URL = 'http://<your-sonarqube-host>:9000' // Replace with your SonarQube server URL
        SONAR_LOGIN = '<your-sonarqube-token>' // Replace with your SonarQube authentication token
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    // Clone the repository directly using Git command with shallow clone
                    sh "git clone --depth 1 https://github.com/hasan914/hello-world.git"
                    dir('hello-world') {
                        // Ensure we're on the right branch
                        sh 'git checkout master'
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ./hello-world"
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    sh "docker run --rm ${IMAGE_NAME}:${IMAGE_TAG} npm test"
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQube') { // Ensure 'SonarQube' matches your Jenkins configuration
                        sh """
                        sonar-scanner \
                            -Dsonar.projectKey=hello-world-jenkins \
                            -Dsonar.projectName='Hello World Project' \
                            -Dsonar.sources=hello-world/src \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_LOGIN}
                        """
                    }
                }
            }
        }
        stage('Push Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    sh "docker run -d -p 3000:3000 ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            sh 'docker image prune -f'
        }
    }
}

Step 3: Configure Jenkins for SonarQube

In Jenkins, ensure that:

    SonarQube is configured in Manage Jenkins > Configure System > SonarQube servers.
    The withSonarQubeEnv('SonarQube') block uses the correct server name.
    Credentials: If you’re using authentication, create a secret token in SonarQube and add it in Jenkins.
    
    
    
    
    









Option 3: Modify the Jenkins Container Dockerfile

If you need a more permanent solution, consider updating the Dockerfile for the Jenkins container to include the installation of wget and the SonarQube Scanner. Here’s an example:

Dockerfile

FROM jenkins/jenkins:lts

# Install wget and unzip
USER root
RUN apt-get update && apt-get install -y wget unzip

# Download and install SonarQube Scanner
RUN wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip && \
    unzip sonar-scanner-cli-4.6.2.2472-linux.zip && \
    mv sonar-scanner-4.6.2.2472-linux /usr/local/sonar-scanner && \
    ln -s /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner && \
    rm sonar-scanner-cli-4.6.2.2472-linux.zip

# Switch back to Jenkins user
USER jenkins

Or, if you’re modifying the Dockerfile for a Jenkins image, you can add:

dockerfile:

RUN mv sonar-scanner-4.6.2.2472-linux /usr/local/sonar-scanner && \
    ln -s /usr/local/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
ENV PATH="$PATH:/usr/local/sonar-scanner/bin"
















1. Update the sonar-project.properties file

In your Node.js project, update the sonar-project.properties file to the following:

sonar.projectKey=hello-world
sonar.sources=.
sonar.host.url=http://sonarqube:9000
sonar.login=sqp_c48c24e264bed6822ae4f2bc9dcfd30737b104e4

2. Ensure Both Containers are on the Same Docker Network

If you're running both containers separately, you can ensure they are on the same network. Here's how:
Create a custom Docker network (if not already done):

docker network create sonarqube_network

Re-run both SonarQube and Jenkins containers with the same network:

# Run SonarQube with the custom network
docker run -d --name sonarqube --network sonarqube_network -p 9000:9000 sonarqube:latest

# Run Jenkins with the custom network
docker run -d --name jenkins --network sonarqube_network -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts

